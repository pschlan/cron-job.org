<?php
namespace chronos;

/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class JobMetadata
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'enabled',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'title',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'saveResponses',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\chronos\JobType',
        ),
        5 => array(
            'var' => 'userGroupId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'requestTimeout',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'redirectSuccess',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'folderId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var bool
     */
    public $enabled = null;
    /**
     * @var string
     */
    public $title = null;
    /**
     * @var bool
     */
    public $saveResponses = null;
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var int
     */
    public $userGroupId = null;
    /**
     * @var int
     */
    public $requestTimeout = null;
    /**
     * @var bool
     */
    public $redirectSuccess = null;
    /**
     * @var int
     */
    public $folderId = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['enabled'])) {
                $this->enabled = $vals['enabled'];
            }
            if (isset($vals['title'])) {
                $this->title = $vals['title'];
            }
            if (isset($vals['saveResponses'])) {
                $this->saveResponses = $vals['saveResponses'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['userGroupId'])) {
                $this->userGroupId = $vals['userGroupId'];
            }
            if (isset($vals['requestTimeout'])) {
                $this->requestTimeout = $vals['requestTimeout'];
            }
            if (isset($vals['redirectSuccess'])) {
                $this->redirectSuccess = $vals['redirectSuccess'];
            }
            if (isset($vals['folderId'])) {
                $this->folderId = $vals['folderId'];
            }
        }
    }

    public function getName()
    {
        return 'JobMetadata';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->enabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->title);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->saveResponses);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->userGroupId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->requestTimeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->redirectSuccess);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->folderId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('JobMetadata');
        if ($this->enabled !== null) {
            $xfer += $output->writeFieldBegin('enabled', TType::BOOL, 1);
            $xfer += $output->writeBool($this->enabled);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->title !== null) {
            $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
            $xfer += $output->writeString($this->title);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->saveResponses !== null) {
            $xfer += $output->writeFieldBegin('saveResponses', TType::BOOL, 3);
            $xfer += $output->writeBool($this->saveResponses);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 4);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->userGroupId !== null) {
            $xfer += $output->writeFieldBegin('userGroupId', TType::I64, 5);
            $xfer += $output->writeI64($this->userGroupId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->requestTimeout !== null) {
            $xfer += $output->writeFieldBegin('requestTimeout', TType::I32, 6);
            $xfer += $output->writeI32($this->requestTimeout);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->redirectSuccess !== null) {
            $xfer += $output->writeFieldBegin('redirectSuccess', TType::BOOL, 7);
            $xfer += $output->writeBool($this->redirectSuccess);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->folderId !== null) {
            $xfer += $output->writeFieldBegin('folderId', TType::I32, 8);
            $xfer += $output->writeI32($this->folderId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
