<?php
namespace chronos;

/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface ChronosNodeIf
{
    /**
     * @return bool
     */
    public function ping();
    /**
     * @param int $userId
     * @return \chronos\Job[]
     * @throws \chronos\InternalError
     */
    public function getJobsForUser($userId);
    /**
     * @param \chronos\JobIdentifier $identifier
     * @return \chronos\Job
     * @throws \chronos\ResourceNotFound
     * @throws \chronos\InternalError
     */
    public function getJobDetails(\chronos\JobIdentifier $identifier);
    /**
     * @param \chronos\JobIdentifier $identifier
     * @param int $maxEntries
     * @return \chronos\JobLogEntry[]
     * @throws \chronos\InternalError
     * @throws \chronos\InvalidArguments
     */
    public function getJobLog(\chronos\JobIdentifier $identifier, $maxEntries);
    /**
     * @param int $userId
     * @param int $mday
     * @param int $month
     * @param int $jobLogId
     * @return \chronos\JobLogEntry
     * @throws \chronos\ResourceNotFound
     * @throws \chronos\Forbidden
     * @throws \chronos\InternalError
     * @throws \chronos\InvalidArguments
     */
    public function getJobLogDetails($userId, $mday, $month, $jobLogId);
    /**
     * @param \chronos\Job $job
     * @throws \chronos\ResourceNotFound
     * @throws \chronos\Forbidden
     * @throws \chronos\InternalError
     * @throws \chronos\InvalidArguments
     */
    public function createOrUpdateJob(\chronos\Job $job);
    /**
     * @param int $userId
     * @param int $maxEntries
     * @return \chronos\NotificationEntry[]
     * @throws \chronos\InternalError
     * @throws \chronos\InvalidArguments
     */
    public function getNotifications($userId, $maxEntries);
    /**
     * @param \chronos\JobIdentifier $identifier
     * @param double $p
     * @return \chronos\TimeSeriesData
     * @throws \chronos\ResourceNotFound
     * @throws \chronos\InternalError
     */
    public function getTimeSeriesData(\chronos\JobIdentifier $identifier, $p);
    /**
     * @param \chronos\JobIdentifier $identifier
     * @throws \chronos\ResourceNotFound
     * @throws \chronos\InternalError
     */
    public function deleteJob(\chronos\JobIdentifier $identifier);
    /**
     * @param int $userId
     * @throws \chronos\InternalError
     */
    public function disableJobsForUser($userId);
    /**
     * @param int $userId
     * @param int $sourceFolderId
     * @param int $destFolderId
     * @throws \chronos\InternalError
     */
    public function moveJobsFromUserFolder($userId, $sourceFolderId, $destFolderId);
    /**
     * @param int $userId
     * @param int $userGroupId
     * @throws \chronos\InternalError
     */
    public function updateUserGroupId($userId, $userGroupId);
    /**
     * @param \chronos\Job $job
     * @param string $xForwardedFor
     * @return string
     * @throws \chronos\InternalError
     * @throws \chronos\InvalidArguments
     * @throws \chronos\FeatureNotAvailable
     */
    public function submitJobTestRun(\chronos\Job $job, $xForwardedFor);
    /**
     * @param string $handle
     * @return \chronos\TestRunStatus
     * @throws \chronos\InvalidArguments
     * @throws \chronos\FeatureNotAvailable
     */
    public function getJobTestRunStatus($handle);
    /**
     * @param string $handle
     * @throws \chronos\FeatureNotAvailable
     */
    public function deleteJobTestRun($handle);
}
