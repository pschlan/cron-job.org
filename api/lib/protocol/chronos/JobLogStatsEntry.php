<?php
namespace chronos;

/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class JobLogStatsEntry
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'nameLookup',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'connect',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'appConnect',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'preTransfer',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'startTransfer',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'total',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $nameLookup = null;
    /**
     * @var int
     */
    public $connect = null;
    /**
     * @var int
     */
    public $appConnect = null;
    /**
     * @var int
     */
    public $preTransfer = null;
    /**
     * @var int
     */
    public $startTransfer = null;
    /**
     * @var int
     */
    public $total = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['nameLookup'])) {
                $this->nameLookup = $vals['nameLookup'];
            }
            if (isset($vals['connect'])) {
                $this->connect = $vals['connect'];
            }
            if (isset($vals['appConnect'])) {
                $this->appConnect = $vals['appConnect'];
            }
            if (isset($vals['preTransfer'])) {
                $this->preTransfer = $vals['preTransfer'];
            }
            if (isset($vals['startTransfer'])) {
                $this->startTransfer = $vals['startTransfer'];
            }
            if (isset($vals['total'])) {
                $this->total = $vals['total'];
            }
        }
    }

    public function getName()
    {
        return 'JobLogStatsEntry';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->nameLookup);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->connect);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->appConnect);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->preTransfer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->startTransfer);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->total);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('JobLogStatsEntry');
        if ($this->nameLookup !== null) {
            $xfer += $output->writeFieldBegin('nameLookup', TType::I32, 1);
            $xfer += $output->writeI32($this->nameLookup);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->connect !== null) {
            $xfer += $output->writeFieldBegin('connect', TType::I32, 2);
            $xfer += $output->writeI32($this->connect);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->appConnect !== null) {
            $xfer += $output->writeFieldBegin('appConnect', TType::I32, 3);
            $xfer += $output->writeI32($this->appConnect);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->preTransfer !== null) {
            $xfer += $output->writeFieldBegin('preTransfer', TType::I32, 4);
            $xfer += $output->writeI32($this->preTransfer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->startTransfer !== null) {
            $xfer += $output->writeFieldBegin('startTransfer', TType::I32, 5);
            $xfer += $output->writeI32($this->startTransfer);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->total !== null) {
            $xfer += $output->writeFieldBegin('total', TType::I32, 6);
            $xfer += $output->writeI32($this->total);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
