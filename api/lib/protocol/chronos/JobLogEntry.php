<?php
namespace chronos;

/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class JobLogEntry
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'jobLogId',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'jobIdentifier',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\chronos\JobIdentifier',
        ),
        3 => array(
            'var' => 'date',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'datePlanned',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'jitter',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'url',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'duration',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'status',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\chronos\JobStatus',
        ),
        9 => array(
            'var' => 'statusText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'httpStatus',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        11 => array(
            'var' => 'mday',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        12 => array(
            'var' => 'month',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        13 => array(
            'var' => 'headers',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'body',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'stats',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\chronos\JobLogStatsEntry',
        ),
    );

    /**
     * @var int
     */
    public $jobLogId = null;
    /**
     * @var \chronos\JobIdentifier
     */
    public $jobIdentifier = null;
    /**
     * @var int
     */
    public $date = null;
    /**
     * @var int
     */
    public $datePlanned = null;
    /**
     * @var int
     */
    public $jitter = null;
    /**
     * @var string
     */
    public $url = null;
    /**
     * @var int
     */
    public $duration = null;
    /**
     * @var int
     */
    public $status = null;
    /**
     * @var string
     */
    public $statusText = null;
    /**
     * @var int
     */
    public $httpStatus = null;
    /**
     * @var int
     */
    public $mday = null;
    /**
     * @var int
     */
    public $month = null;
    /**
     * @var string
     */
    public $headers = null;
    /**
     * @var string
     */
    public $body = null;
    /**
     * @var \chronos\JobLogStatsEntry
     */
    public $stats = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['jobLogId'])) {
                $this->jobLogId = $vals['jobLogId'];
            }
            if (isset($vals['jobIdentifier'])) {
                $this->jobIdentifier = $vals['jobIdentifier'];
            }
            if (isset($vals['date'])) {
                $this->date = $vals['date'];
            }
            if (isset($vals['datePlanned'])) {
                $this->datePlanned = $vals['datePlanned'];
            }
            if (isset($vals['jitter'])) {
                $this->jitter = $vals['jitter'];
            }
            if (isset($vals['url'])) {
                $this->url = $vals['url'];
            }
            if (isset($vals['duration'])) {
                $this->duration = $vals['duration'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
            if (isset($vals['statusText'])) {
                $this->statusText = $vals['statusText'];
            }
            if (isset($vals['httpStatus'])) {
                $this->httpStatus = $vals['httpStatus'];
            }
            if (isset($vals['mday'])) {
                $this->mday = $vals['mday'];
            }
            if (isset($vals['month'])) {
                $this->month = $vals['month'];
            }
            if (isset($vals['headers'])) {
                $this->headers = $vals['headers'];
            }
            if (isset($vals['body'])) {
                $this->body = $vals['body'];
            }
            if (isset($vals['stats'])) {
                $this->stats = $vals['stats'];
            }
        }
    }

    public function getName()
    {
        return 'JobLogEntry';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->jobLogId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->jobIdentifier = new \chronos\JobIdentifier();
                        $xfer += $this->jobIdentifier->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->date);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->datePlanned);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->jitter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->url);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->statusText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->httpStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->mday);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->month);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headers);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->body);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->stats = new \chronos\JobLogStatsEntry();
                        $xfer += $this->stats->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('JobLogEntry');
        if ($this->jobLogId !== null) {
            $xfer += $output->writeFieldBegin('jobLogId', TType::I64, 1);
            $xfer += $output->writeI64($this->jobLogId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->jobIdentifier !== null) {
            if (!is_object($this->jobIdentifier)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('jobIdentifier', TType::STRUCT, 2);
            $xfer += $this->jobIdentifier->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->date !== null) {
            $xfer += $output->writeFieldBegin('date', TType::I64, 3);
            $xfer += $output->writeI64($this->date);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->datePlanned !== null) {
            $xfer += $output->writeFieldBegin('datePlanned', TType::I64, 4);
            $xfer += $output->writeI64($this->datePlanned);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->jitter !== null) {
            $xfer += $output->writeFieldBegin('jitter', TType::I32, 5);
            $xfer += $output->writeI32($this->jitter);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->url !== null) {
            $xfer += $output->writeFieldBegin('url', TType::STRING, 6);
            $xfer += $output->writeString($this->url);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duration !== null) {
            $xfer += $output->writeFieldBegin('duration', TType::I32, 7);
            $xfer += $output->writeI32($this->duration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::I32, 8);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->statusText !== null) {
            $xfer += $output->writeFieldBegin('statusText', TType::STRING, 9);
            $xfer += $output->writeString($this->statusText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->httpStatus !== null) {
            $xfer += $output->writeFieldBegin('httpStatus', TType::I16, 10);
            $xfer += $output->writeI16($this->httpStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mday !== null) {
            $xfer += $output->writeFieldBegin('mday', TType::I16, 11);
            $xfer += $output->writeI16($this->mday);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->month !== null) {
            $xfer += $output->writeFieldBegin('month', TType::I16, 12);
            $xfer += $output->writeI16($this->month);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headers !== null) {
            $xfer += $output->writeFieldBegin('headers', TType::STRING, 13);
            $xfer += $output->writeString($this->headers);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->body !== null) {
            $xfer += $output->writeFieldBegin('body', TType::STRING, 14);
            $xfer += $output->writeString($this->body);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stats !== null) {
            if (!is_object($this->stats)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('stats', TType::STRUCT, 15);
            $xfer += $this->stats->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
