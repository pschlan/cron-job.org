<?php
namespace chronos;

/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class JobSchedule
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'hours',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::BYTE,
            'elem' => array(
                'type' => TType::BYTE,
                ),
        ),
        2 => array(
            'var' => 'mdays',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::BYTE,
            'elem' => array(
                'type' => TType::BYTE,
                ),
        ),
        3 => array(
            'var' => 'minutes',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::BYTE,
            'elem' => array(
                'type' => TType::BYTE,
                ),
        ),
        4 => array(
            'var' => 'months',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::BYTE,
            'elem' => array(
                'type' => TType::BYTE,
                ),
        ),
        5 => array(
            'var' => 'wdays',
            'isRequired' => false,
            'type' => TType::SET,
            'etype' => TType::BYTE,
            'elem' => array(
                'type' => TType::BYTE,
                ),
        ),
        6 => array(
            'var' => 'timezone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'expiresAt',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int[]
     */
    public $hours = null;
    /**
     * @var int[]
     */
    public $mdays = null;
    /**
     * @var int[]
     */
    public $minutes = null;
    /**
     * @var int[]
     */
    public $months = null;
    /**
     * @var int[]
     */
    public $wdays = null;
    /**
     * @var string
     */
    public $timezone = null;
    /**
     * @var int
     */
    public $expiresAt = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['hours'])) {
                $this->hours = $vals['hours'];
            }
            if (isset($vals['mdays'])) {
                $this->mdays = $vals['mdays'];
            }
            if (isset($vals['minutes'])) {
                $this->minutes = $vals['minutes'];
            }
            if (isset($vals['months'])) {
                $this->months = $vals['months'];
            }
            if (isset($vals['wdays'])) {
                $this->wdays = $vals['wdays'];
            }
            if (isset($vals['timezone'])) {
                $this->timezone = $vals['timezone'];
            }
            if (isset($vals['expiresAt'])) {
                $this->expiresAt = $vals['expiresAt'];
            }
        }
    }

    public function getName()
    {
        return 'JobSchedule';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::SET) {
                        $this->hours = array();
                        $_size9 = 0;
                        $_etype12 = 0;
                        $xfer += $input->readSetBegin($_etype12, $_size9);
                        for ($_i13 = 0; $_i13 < $_size9; ++$_i13) {
                            $elem14 = null;
                            $xfer += $input->readByte($elem14);
                            $this->hours[$elem14] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::SET) {
                        $this->mdays = array();
                        $_size15 = 0;
                        $_etype18 = 0;
                        $xfer += $input->readSetBegin($_etype18, $_size15);
                        for ($_i19 = 0; $_i19 < $_size15; ++$_i19) {
                            $elem20 = null;
                            $xfer += $input->readByte($elem20);
                            $this->mdays[$elem20] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::SET) {
                        $this->minutes = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readSetBegin($_etype24, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25) {
                            $elem26 = null;
                            $xfer += $input->readByte($elem26);
                            $this->minutes[$elem26] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::SET) {
                        $this->months = array();
                        $_size27 = 0;
                        $_etype30 = 0;
                        $xfer += $input->readSetBegin($_etype30, $_size27);
                        for ($_i31 = 0; $_i31 < $_size27; ++$_i31) {
                            $elem32 = null;
                            $xfer += $input->readByte($elem32);
                            $this->months[$elem32] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::SET) {
                        $this->wdays = array();
                        $_size33 = 0;
                        $_etype36 = 0;
                        $xfer += $input->readSetBegin($_etype36, $_size33);
                        for ($_i37 = 0; $_i37 < $_size33; ++$_i37) {
                            $elem38 = null;
                            $xfer += $input->readByte($elem38);
                            $this->wdays[$elem38] = true;
                        }
                        $xfer += $input->readSetEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->timezone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->expiresAt);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('JobSchedule');
        if ($this->hours !== null) {
            if (!is_array($this->hours)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('hours', TType::SET, 1);
            $output->writeSetBegin(TType::BYTE, count($this->hours));
            foreach ($this->hours as $iter39 => $iter40) {
                $xfer += $output->writeByte($iter39);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mdays !== null) {
            if (!is_array($this->mdays)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('mdays', TType::SET, 2);
            $output->writeSetBegin(TType::BYTE, count($this->mdays));
            foreach ($this->mdays as $iter41 => $iter42) {
                $xfer += $output->writeByte($iter41);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->minutes !== null) {
            if (!is_array($this->minutes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('minutes', TType::SET, 3);
            $output->writeSetBegin(TType::BYTE, count($this->minutes));
            foreach ($this->minutes as $iter43 => $iter44) {
                $xfer += $output->writeByte($iter43);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->months !== null) {
            if (!is_array($this->months)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('months', TType::SET, 4);
            $output->writeSetBegin(TType::BYTE, count($this->months));
            foreach ($this->months as $iter45 => $iter46) {
                $xfer += $output->writeByte($iter45);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->wdays !== null) {
            if (!is_array($this->wdays)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('wdays', TType::SET, 5);
            $output->writeSetBegin(TType::BYTE, count($this->wdays));
            foreach ($this->wdays as $iter47 => $iter48) {
                $xfer += $output->writeByte($iter47);
            }
            $output->writeSetEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timezone !== null) {
            $xfer += $output->writeFieldBegin('timezone', TType::STRING, 6);
            $xfer += $output->writeString($this->timezone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expiresAt !== null) {
            $xfer += $output->writeFieldBegin('expiresAt', TType::I64, 7);
            $xfer += $output->writeI64($this->expiresAt);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
