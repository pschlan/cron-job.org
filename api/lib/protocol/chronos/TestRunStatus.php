<?php
namespace chronos;

/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TestRunStatus
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'state',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\chronos\TestRunState',
        ),
        2 => array(
            'var' => 'result',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\chronos\JobStatus',
        ),
        3 => array(
            'var' => 'headers',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'body',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'headersOut',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'headersIn',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'dataOut',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'dataIn',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'duration',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'statusText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'httpStatus',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        12 => array(
            'var' => 'peerAddress',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'peerPort',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        14 => array(
            'var' => 'stats',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\chronos\JobLogStatsEntry',
        ),
    );

    /**
     * @var int
     */
    public $state = null;
    /**
     * @var int
     */
    public $result = null;
    /**
     * @var string
     */
    public $headers = null;
    /**
     * @var string
     */
    public $body = null;
    /**
     * @var string
     */
    public $headersOut = null;
    /**
     * @var string
     */
    public $headersIn = null;
    /**
     * @var string
     */
    public $dataOut = null;
    /**
     * @var string
     */
    public $dataIn = null;
    /**
     * @var int
     */
    public $duration = null;
    /**
     * @var string
     */
    public $statusText = null;
    /**
     * @var int
     */
    public $httpStatus = null;
    /**
     * @var string
     */
    public $peerAddress = null;
    /**
     * @var int
     */
    public $peerPort = null;
    /**
     * @var \chronos\JobLogStatsEntry
     */
    public $stats = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['state'])) {
                $this->state = $vals['state'];
            }
            if (isset($vals['result'])) {
                $this->result = $vals['result'];
            }
            if (isset($vals['headers'])) {
                $this->headers = $vals['headers'];
            }
            if (isset($vals['body'])) {
                $this->body = $vals['body'];
            }
            if (isset($vals['headersOut'])) {
                $this->headersOut = $vals['headersOut'];
            }
            if (isset($vals['headersIn'])) {
                $this->headersIn = $vals['headersIn'];
            }
            if (isset($vals['dataOut'])) {
                $this->dataOut = $vals['dataOut'];
            }
            if (isset($vals['dataIn'])) {
                $this->dataIn = $vals['dataIn'];
            }
            if (isset($vals['duration'])) {
                $this->duration = $vals['duration'];
            }
            if (isset($vals['statusText'])) {
                $this->statusText = $vals['statusText'];
            }
            if (isset($vals['httpStatus'])) {
                $this->httpStatus = $vals['httpStatus'];
            }
            if (isset($vals['peerAddress'])) {
                $this->peerAddress = $vals['peerAddress'];
            }
            if (isset($vals['peerPort'])) {
                $this->peerPort = $vals['peerPort'];
            }
            if (isset($vals['stats'])) {
                $this->stats = $vals['stats'];
            }
        }
    }

    public function getName()
    {
        return 'TestRunStatus';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->state);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->result);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headers);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->body);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headersOut);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headersIn);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dataOut);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dataIn);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->statusText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->httpStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->peerAddress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->peerPort);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRUCT) {
                        $this->stats = new \chronos\JobLogStatsEntry();
                        $xfer += $this->stats->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TestRunStatus');
        if ($this->state !== null) {
            $xfer += $output->writeFieldBegin('state', TType::I32, 1);
            $xfer += $output->writeI32($this->state);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->result !== null) {
            $xfer += $output->writeFieldBegin('result', TType::I32, 2);
            $xfer += $output->writeI32($this->result);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headers !== null) {
            $xfer += $output->writeFieldBegin('headers', TType::STRING, 3);
            $xfer += $output->writeString($this->headers);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->body !== null) {
            $xfer += $output->writeFieldBegin('body', TType::STRING, 4);
            $xfer += $output->writeString($this->body);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headersOut !== null) {
            $xfer += $output->writeFieldBegin('headersOut', TType::STRING, 5);
            $xfer += $output->writeString($this->headersOut);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headersIn !== null) {
            $xfer += $output->writeFieldBegin('headersIn', TType::STRING, 6);
            $xfer += $output->writeString($this->headersIn);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataOut !== null) {
            $xfer += $output->writeFieldBegin('dataOut', TType::STRING, 7);
            $xfer += $output->writeString($this->dataOut);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataIn !== null) {
            $xfer += $output->writeFieldBegin('dataIn', TType::STRING, 8);
            $xfer += $output->writeString($this->dataIn);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->duration !== null) {
            $xfer += $output->writeFieldBegin('duration', TType::I32, 9);
            $xfer += $output->writeI32($this->duration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->statusText !== null) {
            $xfer += $output->writeFieldBegin('statusText', TType::STRING, 10);
            $xfer += $output->writeString($this->statusText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->httpStatus !== null) {
            $xfer += $output->writeFieldBegin('httpStatus', TType::I16, 11);
            $xfer += $output->writeI16($this->httpStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->peerAddress !== null) {
            $xfer += $output->writeFieldBegin('peerAddress', TType::STRING, 12);
            $xfer += $output->writeString($this->peerAddress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->peerPort !== null) {
            $xfer += $output->writeFieldBegin('peerPort', TType::I16, 13);
            $xfer += $output->writeI16($this->peerPort);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stats !== null) {
            if (!is_object($this->stats)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('stats', TType::STRUCT, 14);
            $xfer += $this->stats->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
